name: Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Debug SSH Inputs
        run: |
          echo "Host: 3.81.233.4"
          echo "SSH Key: ${{ secrets.EC2_SSH_KEY }}"
          echo "Username: ec2-user"
          
      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: 3.81.233.4               # Ensure this is your EC2 host
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }} # Ensure this is the correct secret key
          script: |
            # Debugging - Check if the SSH connection is successful
            echo "Attempting to SSH into EC2 instance..."
            echo "Running commands on EC2..."
            
            # Debug - Print the current directory on EC2
            echo "Current directory on EC2:"
            pwd
            
            # Navigate to the project directory
            cd ~/aws-automation/docker
            
            # Debug - Verify if the directory exists
            echo "Contents of the docker directory:"
            ls -al
            
            # Pull latest code changes
            echo "Pulling latest changes from GitHub..."
            git pull origin main
            
            # Debug - Confirm if git pull worked
            echo "Git Pull Status: $?"
            
            # Build the Docker image locally on EC2
            echo "Building Docker image..."
            docker build -t my-nginx .
            
            # Debug - Check the status of the Docker build
            echo "Docker Build Status: $?"
            
            # Stop and remove any existing container
            echo "Stopping and removing existing Docker container..."
            docker stop my-nginx-container || true
            docker rm my-nginx-container || true
            
            # Debug - Check Docker containers before running new one
            echo "Docker containers currently running:"
            docker ps -a
            
            # Run the new container
            echo "Running new Docker container..."
            docker run -d -p 80:80 --name my-nginx-container my-nginx
            
            # Debug - Verify if the container is running
            echo "Docker containers after running new container:"
            docker ps
